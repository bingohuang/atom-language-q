'scopeName': 'source.q'
'name': 'Qlang'
'comment': 'Q language'
'fileTypes': ['ql']

'foldingStartMarker': '({|\\()\\s*$'
'foldingStopMarker': '(}|\\))\\s*$'
'patterns': [
  {
    'comment': 'Block comments'
    'begin': '/\\*'
    'end': '\\*/'
    'captures':
      '0':
        'name': 'punctuation.definition.comment.q'
    'name': 'comment.block.q'
  }
  {
    'comment': 'Line comments'
    'begin': '//'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.comment.q'
    'end': '$'
    'name': 'comment.line.double-slash.q'
  }
  {
    'comment': 'Interpreted string literals'
    'begin': '"'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.q'
    'end': '"'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.q'
    'name': 'string.quoted.double.q'
    'patterns': [
      {
        'include': '#string_escaped_char'
      }
      {
        'include': '#string_placeholder'
      }
    ]
  }
  {
    'comment': 'Raw string literals'
    'begin': '`'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.q'
    'end': '`'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.q'
    'name': 'string.quoted.raw.q',
    'patterns': [
      {
        'include': '#string_placeholder'
      }
    ]
  }
  {
    'comment': 'Syntax error receiving channels'
    'match': '<\\-([\\t ]+)chan\\b'
    'captures':
      '1':
        'name': 'invalid.illegal.receive-channel.q'
  }
  {
    'comment': 'Syntax error sending channels'
    'match': '\\bchan([\\t ]+)<\-'
    'captures':
      '1':
        'name': 'invalid.illegal.send-channel.q'
  }
  {
    'comment': 'Syntax error using slices'
    'match': '\\[\\](\\s+)'
    'captures':
      '1':
        'name': 'invalid.illegal.slice.q'
  }
  {
    'comment': 'Syntax error numeric literals'
    'match': '\\b0[0-7]*[89]\\d*\\b'
    'name': 'invalid.illegal.numeric.q'
  }
  {
    'comment': 'Built-in functions'
    'match': '\\b(append|cap|close|complex|copy|delete|imag|len|make|new|panic|print|println|real|recover)\\b(?=\\()'
    'name': 'support.function.builtin.q'
  }
  {
    'comment': 'Function declarations'
    'match': '^(\\bfunc\\b)(?:\\s+(\\([^\\)]+\\)\\s+)?([a-zA-Z_]\\w*)(?=\\())?'
    'captures':
      '1':
        'name': 'keyword.function.q'
      '2':
        'patterns': [
          {
            'include': '#brackets'
          }
          {
            'include': '#operators'
          }
        ]
      '3':
        'name': 'entity.name.function'
  }
  {
    'comment': 'Functions'
    'match': '(\\bfunc\\b)|([a-zA-Z_]\\w*)(?=\\()'
    'captures':
      '1':
        'name': 'keyword.function.q'
      '2':
        'name': 'support.function.q'
  }
  {
    'comment': 'Floating-point literals'
    'match': '(\\.\\d+([Ee][\-\+]\\d+)?i?)\\b|\\b\\d+\\.\\d*(([Ee][\-\+]\\d+)?i?\\b)?'
    'name': 'constant.numeric.floating-point.q'
  }
  {
    'comment': 'Integers'
    'match': '\\b((0x[0-9a-fA-F]+)|(0[0-7]+i?)|(\\d+([Ee]\\d+)?i?)|(\\d+[Ee][\-\+]\\d+i?))\\b'
    'name': 'constant.numeric.integer.q'
  }
  {
    'comment': 'Language constants'
    'match': '\\b(true|false|nil|iota)\\b'
    'name': 'constant.language.q'
  }
  {
    'comment': 'Package declarations'
    'match': '(?<=package)\\s+([a-zA-Z_]\\w*)'
    'captures':
      '1':
        'name': 'entity.name.package.q'
  }
  {
    'comment': 'Type declarations'
    'match': '(?<=type)\\s+([a-zA-Z_]\\w*)'
    'captures':
      '1':
        'name': 'entity.name.type.q'
  }
  {
    'comment': 'Shorthand variable declaration and assignments'
    'match': '[a-zA-Z_]\\w*(?:,\\s*[a-zA-Z_]\\w*)*(?=\\s*:=)'
    'captures':
      '0':
        'patterns': [
          {
            'match': '[a-zA-Z_]\\w*'
            'name': 'variable.other.assignment.q'
          }
          {
            'include': '#delimiters'
          }
        ]
  }
  {
    'comment': 'Assignments to existing variables'
    'match': '(?<!var )\\s*([a-zA-Z_]\\w*(?:,\\s*[a-zA-Z_]\\w*)*)(?=\\s*=[^=])'
    'captures':
      '1':
        'patterns': [
          {
            'match': '[a-zA-Z_]\\w*'
            'name': 'variable.other.assignment.q'
          }
          {
            'include': '#delimiters'
          }
        ]
  }
  {
    'comment': 'Single line variable declarations/assignments'
    'match': '(?<=var)\\s+(.*)$'
    'captures':
      '1':
        'patterns': [
          {
            'include': '#variables'
          }
        ]
  }
  {
    'comment': 'Multiline variable declarations/assignments'
    'begin': '(\\bvar\\b)\\s+(\\()'
    'beginCaptures':
      '1':
        'name': 'keyword.var.q'
      '2':
        'name': 'punctuation.other.bracket.round.q'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'punctuation.other.bracket.round.q'
    'patterns': [
      {
        'include': '#variables'
      }
      {
        'include': '$self'
      }
    ]
  }
  {
    'comment': 'Terminators'
    'match': ';'
    'name': 'punctuation.terminator.q'
  }
  {
    'include': '#brackets'
  }
  {
    'include': '#delimiters'
  }
  {
    'include': '#keywords'
  }
  {
    'include': '#operators'
  }
  {
    'include': '#runes'
  }
  {
    'include': '#storage_types'
  }
]
'repository':
  'brackets':
    'patterns': [
      {
        'match': '\\{|\\}'
        'name': 'punctuation.other.bracket.curly.q'
      }
      {
        'match': '\\(|\\)'
        'name': 'punctuation.other.bracket.round.q'
      }
      {
        'match': '\\[|\\]'
        'name': 'punctuation.other.bracket.square.q'
      }
    ]
  'delimiters':
    'patterns': [
      {
        'match': ','
        'name': 'punctuation.other.comma.q'
      }
      {
        'match': '\\.(?!\\.\\.)'
        'name': 'punctuation.other.period.q'
      }
      {
        'match': ':(?!=)'
        'name': 'punctuation.other.colon.q'
      }
    ]
  'keywords':
    'patterns': [
      {
        'comment': 'Flow control keywords'
        'match': '\\b(break|case|continue|default|defer|else|fallthrough|for|go|goto|if|range|return|select|switch)\\b'
        'name': 'keyword.control.q'
      }
      {
        'match': '\\bchan\\b'
        'name': 'keyword.channel.q'
      }
      {
        'match': '\\bconst\\b'
        'name': 'keyword.const.q'
      }
      {
        'match': '\\bfunc\\b'
        'name': 'keyword.function.q'
      }
      {
        'match': '\\binterface\\b'
        'name': 'keyword.interface.q'
      }
      {
        'match': '\\bimport\\b'
        'name': 'keyword.import.q'
      }
      {
        'match': '\\bmap\\b'
        'name': 'keyword.map.q'
      }
      {
        'match': '\\bpackage\\b'
        'name': 'keyword.package.q'
      }
      {
        'match': '\\bstruct\\b'
        'name': 'keyword.struct.q'
      }
      {
        'match': '\\btype\\b'
        'name': 'keyword.type.q'
      }
      {
        'match': '\\bvar\\b'
        'name': 'keyword.var.q'
      }
    ]
  'operators':
    'comment': 'Note that the order here is very important!'
    'patterns': [
      {
        'match': '(\\*|&)(?=\\w)'
        'name': 'keyword.operator.address.q'
      }
      {
        'match': '<\\-'
        'name': 'keyword.operator.channel.q'
      }
      {
        'match': '\\-\\-'
        'name': 'keyword.operator.decrement.q'
      }
      {
        'match': '\\+\\+'
        'name': 'keyword.operator.increment.q'
      }
      {
        'match': '(==|!=|<=|>=|<[^<]|>[^>])'
        'name': 'keyword.operator.comparison.q'
      }
      {
        'match': '(&&|\\|\\||!)'
        'name': 'keyword.operator.logical.q'
      }
      {
        'match': '(=|\\+=|\\-=|\\|=|\\^=|\\*=|/=|:=|%=|<<=|>>=|&\\^=|&=)'
        'name': 'keyword.operator.assignment.q'
      }
      {
        'match': '(\\+|\\-|\\*|/|%)'
        'name': 'keyword.operator.arithmetic.q'
      }
      {
        'match': '(&(?!\\^)|\\||\\^|&\\^|<<|>>)'
        'name': 'keyword.operator.arithmetic.bitwise.q'
      }
      {
        'match': '\\.\\.\\.'
        'name': 'keyword.operator.ellipsis.q'
      }
    ]
  'runes':
    'patterns': [
      {
        'match': '\\\'(\\\\([0-7]{3}|[abfnrtv\\\\\'"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})|\\\p{Any})\\\''
        'name': 'constant.other.rune.q'
      }
      {
        'match': '\\\'.*\\\''
        'name': 'invalid.illegal.unknown-rune.q'
      }
    ]
  'storage_types':
    'patterns': [
      {
        'match': '\\bbool\\b'
        'name': 'storage.type.boolean.q'
      }
      {
        'match': '\\bbyte\\b'
        'name': 'storage.type.byte.q'
      }
      {
        'match': '\\berror\\b'
        'name': 'storage.type.error.q'
      }
      {
        'match': '\\b(complex(64|128)|float(32|64)|u?int(8|16|32|64)?)\\b'
        'name': 'storage.type.numeric.q'
      }
      {
        'match': '\\brune\\b'
        'name': 'storage.type.rune.q'
      }
      {
        'match': '\\bstring\\b'
        'name': 'storage.type.string.q'
      }
      {
        'match': '\\buintptr\\b'
        'name': 'storage.type.uintptr.q'
      }
    ]
  'string_escaped_char':
    'patterns': [
      {
        'match': '\\\\([0-7]{3}|[abfnrtv\\\\\'"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})'
        'name': 'constant.character.escape.q'
      }
      {
        'match': '\\\\[^0-7xuUabfnrtv\\\'"]'
        'name': 'invalid.illegal.unknown-escape.q'
      }
    ]
  'string_placeholder':
    'patterns': [
      {
        'match': '%(\\[\\d+\\])?([\\+#\\-0\\x20]{,2}((\\d+|\\*)?(\\.?(\\d+|\\*|(\\[\\d+\\])\\*?)?(\\[\\d+\\])?)?))?[vT%tbcdoqxXUbeEfFgGsp]'
        'name': 'constant.other.placeholder.q'
      }
    ]
  'variables':
    'comment': 'First add tests and make sure existing tests still pass when changing anything here!'
    'patterns': [
      {
        'match': '([a-zA-Z_]\\w*(?:,\\s*[a-zA-Z_]\\w*)*)\\s*(=.*)'
        'captures':
          '1':
            'patterns': [
              {
                'match': '[a-zA-Z_]\\w*'
                'name': 'variable.other.assignment.q'
              }
              {
                'include': '#delimiters'
              }
            ]
          '2':
            'patterns': [
              {
                'include': '$self'
              }
            ]
      }
      {
        'match': '([a-zA-Z_]\\w*(?:,\\s*[a-zA-Z_]\\w*)*)(\\s+[\\*]?[a-zA-Z_]\\w*\\s*)(=.*)'
        'captures':
          '1':
            'patterns': [
              {
                'match': '[a-zA-Z_]\\w*'
                'name': 'variable.other.assignment.q'
              }
              {
                'include': '#delimiters'
              }
            ]
          '2':
            'patterns': [
              {
                'include': '$self'
              }
            ]
          '3':
            'patterns': [
              {
                'include': '$self'
              }
            ]
      }
      {
        'match': '([a-zA-Z_]\\w*(?:,\\s*[a-zA-Z_]\\w*)*)(\\s+[\\[\\]\\*]{0,3}[a-zA-Z_]\\w*\\s*[^=].*)'
        'captures':
          '1':
            'patterns': [
              {
                'match': '[a-zA-Z_]\\w*'
                'name': 'variable.other.declaration.q'
              }
              {
                'include': '#delimiters'
              }
            ]
          '2':
            'patterns': [
              {
                'include': '$self'
              }
            ]
      }
    ]
